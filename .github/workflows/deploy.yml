name: Deploy Spring Boot to EC2

on:
  push:
    branches: ["dev/test"] # 또는 main 브랜치 등

  pull_request:
    branches: ["dev/test"] # PR이 생성될 때 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle" # Gradle 의존성 캐싱

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test # 배포 속도를 위해 테스트 생략, 필요시 활성화

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: 3.35.8.25
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu/app"

      - name: Run JAR on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 3.35.8.25
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 기존 프로세스 종료
            pkill -f 'java -jar' || echo "실행 중인 프로세스가 없습니다"

            # 로그 디렉토리 생성
            mkdir -p /home/ubuntu/app/logs

            # 최신 JAR 파일 찾기
            JAR_FILE=$(find /home/ubuntu/app -name "*.jar" -type f -printf "%T@ %p\n" | sort -rn | head -1 | cut -d' ' -f2-)

            # 애플리케이션 실행
            cd /home/ubuntu/app
            nohup java -jar $JAR_FILE --spring.profiles.active=prod > ./logs/application.log 2>&1 &

            # 실행 확인
            sleep 5
            if pgrep -f "$JAR_FILE" > /dev/null; then
              echo "애플리케이션이 성공적으로 시작되었습니다"
              exit 0
            else
              echo "애플리케이션 시작에 실패했습니다"
              cat ./logs/application.log
              exit 1
            fi
